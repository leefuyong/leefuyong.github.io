[{"title":"Python3 列表","url":"/2019/01/20/Python3-列表/","content":"> 序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。Python有6个序列的内置类型，但最常见的是列表和元组。序列都可以进行的操作包括索引，切片，加，乘，检查成员。此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。列表的数据项不需要具有相同的类型.\n\n## 列表的相关操作\n\n> 关于列表操作的具体步骤和代码实现，可以参考文末的代码片段，里面会有相关注释。\n\n### 列表的创建\n```\nlist1 = ['Google', 'Runoob', 1997, 2000];\nlist2 = [1, 2, 3, 4, 5 ];\nlist3 = [\"a\", \"b\", \"c\", \"d\"];```\n### 访问列表中的值\n```\nlist1 = ['Google', 'Runoob', 1997, 2000];\nlist2 = [1, 2, 3, 4, 5, 6, 7 ];\nprint (\"list1[0]: \", list1[0])\nprint (\"list2[1:5]: \", list2[1:5])```\n### 更新列表\n```\nlist = ['Google', 'Runoob', 1997, 2000]\nprint (\"第三个元素为 : \", list[2])\nlist[2] = 2001\nprint (\"更新后的第三个元素为 : \", list[2])\n```\n### 删除列表元素\n```\nlist = ['Google', 'Runoob', 1997, 2000]\nprint (\"原始列表 : \", list)\ndel list[2]\nprint (\"删除第三个元素 : \", list)\n```\n### Python列表脚本操作符\n```\nlen([1, 2, 3])\t3\t长度\n[1, 2, 3] + [4, 5, 6]\t[1, 2, 3, 4, 5, 6]\t组合\n['Hi!'] * 4\t['Hi!', 'Hi!', 'Hi!', 'Hi!']\t重复\n3 in [1, 2, 3]\tTrue\t元素是否存在于列表中\nfor x in [1, 2, 3]: print(x, end=\" \")\t1 2 3\t迭代\n```\n### Python列表截取与拼接\n```\nL[2]\t'Taobao'\t读取第三个元素\nL[-2]\t'Runoob'\t从右侧开始读取倒数第二个元素: count from the right\nL[1:]\t['Runoob', 'Taobao']\t输出从第二个元素开始后的所有元素\n```\n### Python嵌套列表\n```\n>>>a = ['a', 'b', 'c']\n>>> n = [1, 2, 3]\n>>> x = [a, n]\n>>> x\n[['a', 'b', 'c'], [1, 2, 3]]\n>>> x[0]\n['a', 'b', 'c']\n>>> x[0][1]\n'b'\n```\n### Python列表函数&方法\n```\n1\tlen(list)\n列表元素个数\n2\tmax(list)\n返回列表元素最大值\n3\tmin(list)\n返回列表元素最小值\n4\tlist(seq)\n将元组转换为列表\n\n```\n```\n1\tlist.append(obj)\n在列表末尾添加新的对象\n2\tlist.count(obj)\n统计某个元素在列表中出现的次数\n3\tlist.extend(seq)\n在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）\n4\tlist.index(obj)\n从列表中找出某个值第一个匹配项的索引位置\n5\tlist.insert(index, obj)\n将对象插入列表\n6\tlist.pop([index=-1])\n移除列表中的一个元素（默认最后一个元素），并且返回该元素的值\n7\tlist.remove(obj)\n移除列表中某个值的第一个匹配项\n8\tlist.reverse()\n反向列表中元素\n9\tlist.sort(cmp=None, key=None, reverse=False)\n对原列表进行排序\n10\tlist.clear()\n清空列表\n11\tlist.copy()\n复制列表\n```","tags":["Python"]},{"title":"python对象——字符串","url":"/2019/01/20/python对象——字符串/","content":"> Python3:字符串是 Python 中最常用的数据类型。我们可以使用引号( ' 或 \" )来创建字符串。创建字符串很简单，只要为变量分配一个值即可。例如：\n>&#160; &#160; &#160; &#160;var1 = 'Hello World!'\n&#160; &#160; &#160; &#160;var2 = \"Runoob\"  \n\n### Python 访问字符串中的值 ###\n\n&#160; &#160; &#160; &#160;Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。Python 访问子字符串，可以使用方括号来截取字符串，如下实例：\n```java\n\tvar1 = 'Hello World!'\n\tvar2 = \"Runoob\"\n\t \n\tprint (\"var1[0]: \", var1[0]) //索引从0开始 var1[0]: H \n\tprint (\"var2[1:5]: \", var2[1:5])//截取字符串操作默认左开右闭区间 var2[1:5]: unoo\n\n```\n\n\n### Python 字符串更新 ###\n\n&#160; &#160; &#160; &#160;你可以截取字符串的一部分并与其他字段拼接，如下实例：\n\n```java\n\tvar1 = 'Hello World!'\n\tprint (\"已更新字符串 : \", var1[:6] + 'Runoob!') // [0-5] Hello Runnoob!\n\n```\n\n### Python转义字符 ###\n\n&#160; &#160; &#160; &#160;在需要在字符中使用特殊字符时，python用反斜杠(\\\\)转义字符。如下表：\n\n|   |   |\n| ------------ | ------------ |\n| \\\\(在行尾时)  | 续行符  |\n| \\\\  | 反斜杠符号  |\n|  \\' | 单引号  |\n|  \\\" |  双引号 |\n|  \\a |  响铃 |\n|  \\b |  退格backspace |\n|  \\e |  转义 |\n|  \\000 | 空  |\n|  \\n |  换行 |\n|  \\v |  纵向制表符 |\n|  \\t |  横向制表符 |\n|  \\r |  回车 |\n|  \\f |  换页 |\n|  \\oyy | 八进制数，yy代表的字符，例如：\\o12代表换行  |\n|  \\xyy | \t十六进制数，yy代表的字符，例如：\\x0a代表换行  |\n|  \\other | 其它的字符以普通格式输出  |\n\n### Python字符串运算 ###\n\n&#160; &#160; &#160; &#160;下表实例变量a值为字符串 \"Hello\"，b变量值为 \"Python\"：\n\n```java\na = \"Hello\"\nb = \"Python\"\n\nprint(\"a + b 输出结果：\", a + b) # + 字符串连接操作 a + b 输出结果： HelloPython\nprint(\"a * 2 输出结果：\", a * 2) # 重复输出字符串 a*2 输出结果：HelloHello\nprint(\"a[1] 输出结果：\", a[1]) # 通过索引获取字符串中字符 a[1] 输出结果 e\nprint(\"a[1:4] 输出结果：\", a[1:4]) # 截取字符串中的一部分，遵循左闭右开原则，str[0,2] 是不包含第 3 个字符的。 a[1:4] 输出结果： ell\n\nif( \"H\" in a) : # in 成员运算符 - 如果字符串中包含给定的字符返回 True\n    print(\"H 在变量 a 中\")\nelse :\n    print(\"H 不在变量 a 中\")\n\nif( \"M\" not in a) : # not in 成员运算符 - 如果字符串中不包含给定的字符返回 True\n    print(\"M 不在变量 a 中\")\nelse :\n    print(\"M 在变量 a 中\")\n\nprint (r'\\n') # \t原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。\nprint (R'\\n')\n```\n\n### Python格式化字符串 ###\n\n&#160; &#160; &#160; &#160;Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。\n\n```java\n\"\"\"\n格式化字符串:\n    两种方式：% format方法，这里我们介绍第一种方法\n %[(name)][flags][width].[precision]typecode\n    (name)      可选，用于选择指定的key\n    flags          可选，可供选择的值有:\n    +       右对齐；正数前加正号，负数前加负号；\n    -        左对齐；正数前无符号，负数前加负号；\n    空格    右对齐；正数前加空格，负数前加负号；\n    0        右对齐；正数前无符号，负数前加负号；用0填充空白处\n    width         可选，占有宽度\n    .precision   可选，小数点后保留的位数\n    typecode    必选\n    s，获取传入对象的__str__方法的返回值，并将其格式化到指定位置\n    r，获取传入对象的__repr__方法的返回值，并将其格式化到指定位置\n    c，整数：将数字转换成其unicode对应的值，10进制范围为 0 <= i <= 1114111（py27则只支持0-255）；字符：将字符添加到指定位置\n    o，将整数转换成 八  进制表示，并将其格式化到指定位置\n    x，将整数转换成十六进制表示，并将其格式化到指定位置\n    d，将整数、浮点数转换成 十 进制表示，并将其格式化到指定位置\n    e，将整数、浮点数转换成科学计数法，并将其格式化到指定位置（小写e）\n    E，将整数、浮点数转换成科学计数法，并将其格式化到指定位置（大写E）\n    f， 将整数、浮点数转换成浮点数表示，并将其格式化到指定位置（默认保留小数点后6位）\n    F，同上\n    g，自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过6位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是e；）\n    G，自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过6位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是E；）\n    %，当字符串中存在格式化标志时，需要用 %%表示一个百分号\n    注：Python中百分号格式化是不存在自动将整数转换成二进制表示的方式\n\"\"\"\nb = \"--%(name)+10s————————%(age)-10d————————\"%{'name':'xx','age':20}\nprint(b) //--        xx————————20        ————————\n\"\"\"\n        name: 指定字典{'name':'xx','age':20}name的key所对应的value\n        +：右对齐\n        10：占有宽度\n        s：获取传入对象的__str__方法的返回值，并将其格式化到指定位置\n\"\"\"\n```\n\n### Python三个引号的引号对 ###\n\n&#160; &#160; &#160; &#160;Python三个引号的引号对，相当于Java中的注释文档。字符串中可以包含换行符、制表符以及其他特殊字符。\n\n### Python 的字符串内建函数 ###\n&#160; &#160; &#160; &#160;\n```\n1\t\ncapitalize()\n将字符串的第一个字符转换为大写\n\n2\t\ncenter(width, fillchar)\n\n\n返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。\n3\t\ncount(str, beg= 0,end=len(string))\n\n\n返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数\n4\t\nbytes.decode(encoding=\"utf-8\", errors=\"strict\")\n\n\nPython3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。\n5\t\nencode(encoding='UTF-8',errors='strict')\n\n\n以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'\n6\t\nendswith(suffix, beg=0, end=len(string))\n检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.\n\n7\t\nexpandtabs(tabsize=8)\n\n\n把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。\n8\t\nfind(str, beg=0 end=len(string))\n\n\n检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1\n9\t\nindex(str, beg=0, end=len(string))\n\n\n跟find()方法一样，只不过如果str不在字符串中会报一个异常.\n10\t\nisalnum()\n\n\n如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False\n11\t\nisalpha()\n\n\n如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False\n12\t\nisdigit()\n\n\n如果字符串只包含数字则返回 True 否则返回 False..\n13\t\nislower()\n\n\n如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False\n14\t\nisnumeric()\n\n\n如果字符串中只包含数字字符，则返回 True，否则返回 False\n15\t\nisspace()\n\n\n如果字符串中只包含空白，则返回 True，否则返回 False.\n16\t\nistitle()\n\n\n如果字符串是标题化的(见 title())则返回 True，否则返回 False\n17\t\nisupper()\n\n\n如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False\n18\t\njoin(seq)\n\n\n以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串\n19\t\nlen(string)\n\n\n返回字符串长度\n20\t\nljust(width[, fillchar])\n\n\n返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。\n21\t\nlower()\n\n\n转换字符串中所有大写字符为小写.\n22\t\nlstrip()\n\n\n截掉字符串左边的空格或指定字符。\n23\t\nmaketrans()\n\n\n创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。\n24\t\nmax(str)\n\n\n返回字符串 str 中最大的字母。\n25\t\nmin(str)\n\n\n返回字符串 str 中最小的字母。\n26\t\nreplace(old, new [, max])\n\n\n把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。\n27\t\nrfind(str, beg=0,end=len(string))\n\n\n类似于 find()函数，不过是从右边开始查找.\n28\t\nrindex( str, beg=0, end=len(string))\n\n\n类似于 index()，不过是从右边开始.\n29\t\nrjust(width,[, fillchar])\n\n\n返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串\n30\t\nrstrip()\n\n\n删除字符串字符串末尾的空格.\n31\t\nsplit(str=\"\", num=string.count(str))\n\n\nnum=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串\n32\t\nsplitlines([keepends])\n\n\n按照行('\\r', '\\r\\n', \\n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。\n33\t\nstartswith(substr, beg=0,end=len(string))\n\n\n检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。\n34\t\nstrip([chars])\n\n\n在字符串上执行 lstrip()和 rstrip()\n35\t\nswapcase()\n\n\n将字符串中大写转换为小写，小写转换为大写\n36\t\ntitle()\n\n\n返回\"标题化\"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())\n37\t\ntranslate(table, deletechars=\"\")\n\n\n根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中\n38\t\nupper()\n\n\n转换字符串中的小写字母为大写\n39\t\nzfill (width)\n\n\n返回长度为 width 的字符串，原字符串右对齐，前面填充0\n40\t\nisdecimal()\n\n\n检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。```","tags":["Python"],"categories":["Python"]},{"title":"python对象——数字类型","url":"/2019/01/19/python对象——数字类型/","content":"> python程序的基础就是对象，因为对象是python编程中最基础的概念，是学习python所关注的焦点。  \n\n&#160; &#160; &#160; &#160;python数字类型的完整工具包括：\n1. 整数和浮点数\n2. 复数\n3. 固定精度的十进制数\n4. 有理数\n5. 集合\n6. 布尔类型\n7. 无穷整数精度\n8. 各种数字内置函数和模块  \n\n## 数字常量\n&#160; &#160; &#160; &#160;python在基本类型中，python提供了：整数（正整数和负整数）和浮点数（带有小数部分的数字）。python还提供了十六进制、八进制、二进制常量来表示整数。并且还允许无限精度的整数（只要内存空间允许，它可以增长成任意位数的整数）。如下简单示例：  \n\n![](http://47.105.201.20/991cd9c7-573b-4b7e-96b3-24a2ce77bc67.jpg)\n\n## 内置数学工具和扩展\n&#160; &#160; &#160; &#160;\n\n### 表达式操作符\n&#160; &#160; &#160; &#160;+ - * / >> **等\n\n### 内置数学函数\n&#160; &#160; &#160; &#160;pow abs round int hex bin等。\n\n### 公用模块\n&#160; &#160; &#160; &#160;random math等\n\n## python表达式操作符\n&#160; &#160; &#160; &#160;\n\n\n","tags":["Python"],"categories":["Python"]},{"title":"怎么用最短时间高效而踏实地学习 Python?","url":"/2019/01/19/怎么用最短时间高效而踏实地学习-Python/","content":"> 因为Python是一门不需要花太多精力（甚至可以说很少），就可以基本掌握的一门语言，所以推荐这本书。这是一本非常好的针对机器学习的入门书，书中的例子源码都是Python实现的，并且能帮你迅速熟悉Python相关的各种计算库。\n# 第一章 集体智慧导言\n## 1.1 什么是集体智慧\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;集体智慧（Collective Intelligence）:为了创造新的想法，而将一群人的行为、偏好或思想组合在一起。\n## 1.2 什么是机器学习\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;机器学习是人工智能（AI，artificial intelligence）领域中与算法相关的一个子域，它允许计算机不断地进行学习。大多数情况下，这相当于将一组数据传递给算法，并由算法推断出与这些数据的属性相关的信息————借助这些信息，算法就能准确预测出未来有可能会出现的其他数据。为了实现归纳，机器学习会利用它所认定的出现于数据中的重要特征对数据进行“训练”，并借此得到一个模型。\n# 第二章 提供推荐\n## 2.1 协作型过滤\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个协作型过滤算法通常的做法是对一大群人进行搜索，并从中找出与我们品味相近的一-小群人。算法会对这些人所偏爱的其他内容进行考查，并将它们组合起来构造出一个经过排名的推荐列表。有许多不同的方法可以帮助我们确定哪些人与自己的品味相近，并将他们的选择组合成列表。\n## 2.2 搜集偏好\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们可以先构造一个简单的数据集：\n```\n\t critics={'Lisa Rose': {'Lady in the Water': 2.5, 'Snakes on a Plane': 3.5,\n\t 'Just My Luck': 3.0, 'Superman Returns': 3.5, 'You, Me and Dupree': 2.5, \n\t 'The Night Listener': 3.0},\n\n\t 'Gene Seymour': {'Lady in the Water': 3.0, 'Snakes on a Plane': 3.5, \n\t 'Just My Luck': 1.5, 'Superman Returns': 5.0, 'The Night Listener': 3.0, \n\t 'You, Me and Dupree': 3.5}, \n\n\t'Michael Phillips': {'Lady in the Water': 2.5, 'Snakes on a Plane': 3.0,\n\t 'Superman Returns': 3.5, 'The Night Listener': 4.0},\n\n\t'Claudia Puig': {'Snakes on a Plane': 3.5, 'Just My Luck': 3.0,\n\t 'The Night Listener': 4.5, 'Superman Returns': 4.0, \n\t 'You, Me and Dupree': 2.5},\n\n\t'Mick LaSalle': {'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0, \n\t 'Just My Luck': 2.0, 'Superman Returns': 3.0, 'The Night Listener': 3.0,\n\t 'You, Me and Dupree': 2.0}, \n\n\t'Jack Matthews': {'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0,\n\t 'The Night Listener': 3.0, 'Superman Returns': 5.0, 'You, Me and Dupree': 3.5},\n\n\t'Toby': {'Snakes on a Plane':4.5,'You, Me and Dupree':1.0,'Superman Returns':4.0},\n\n\t'xiaoYu': {'Lady in the Water': 2.0, 'Snakes on a Plane': 3.0,\n\t 'Just My Luck': 2.5, 'Superman Returns': 3.0, 'You, Me and Dupree': 2.0, \n\t 'The Night Listener': 2.5}}\n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果你对文字型数据不是那么敏感，我们将其转化为表格：总而言之：这里是几位观影者对几部电影的评分。\n\n<div align=center>\n\t<img src=\"http://47.105.201.20/48dce9e5-e15b-4ce6-9125-648dfd90a8e9.jpg\" width = \"700\" height = \"100\"  />\n</div>\n## 2.3 寻找相近的用户\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;搜集完人们的偏好数据之后，我们须要有一种方法来确定人们在品味方面的相似程度。为此，我们可以将每个人与所有其他人进行对比，并计算他们的相似度评价值。有若千种方法可以达到此目的，介绍两套计算相似度评价值的体系:**欧几里德距离**和**皮尔逊相关度**\n### 2.3.1 欧几里得距离\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多维空间中两点之间的距离，用来衡量二者的相似度。距离越小，相似度越高。\n### 2.3.2 皮尔逊相关度评价\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;判断两组数据与某一直线拟合程度的一种度量。在数据不是很规范的时候（如影评者对影片的评价总是相对于平均水平偏离很大时），会给出更好的结果。相关系数越大，相似度越高。","tags":["Python"],"categories":["Python"]},{"title":"文章名称","url":"/2019/01/19/文章名称/","tags":["centOS","tomcat"],"categories":["云服务器"]},{"title":"Hello World","url":"/2019/01/18/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]