[{"title":"python对象——字符串","url":"/2019/01/20/python对象——字符串/","content":"> Python3:字符串是 Python 中最常用的数据类型。我们可以使用引号( ' 或 \" )来创建字符串。创建字符串很简单，只要为变量分配一个值即可。例如：\n>&#160; &#160; &#160; &#160;var1 = 'Hello World!'\n&#160; &#160; &#160; &#160;var2 = \"Runoob\"  \n\n### Python 访问字符串中的值 ###\n\n&#160; &#160; &#160; &#160;Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。Python 访问子字符串，可以使用方括号来截取字符串，如下实例：\n```java\n\tvar1 = 'Hello World!'\n\tvar2 = \"Runoob\"\n\t \n\tprint (\"var1[0]: \", var1[0]) //索引从0开始 var1[0]: H \n\tprint (\"var2[1:5]: \", var2[1:5])//截取字符串操作默认左开右闭区间 var2[1:5]: unoo\n\n```\n\n\n### Python 字符串更新 ###\n\n&#160; &#160; &#160; &#160;你可以截取字符串的一部分并与其他字段拼接，如下实例：\n\n```java\n\tvar1 = 'Hello World!'\n\tprint (\"已更新字符串 : \", var1[:6] + 'Runoob!') // [0-5] Hello Runnoob!\n\n```\n\n### Python转义字符 ###\n\n&#160; &#160; &#160; &#160;在需要在字符中使用特殊字符时，python用反斜杠(\\\\)转义字符。如下表：\n\n|   |   |\n| ------------ | ------------ |\n| \\\\(在行尾时)  | 续行符  |\n| \\\\  | 反斜杠符号  |\n|  \\' | 单引号  |\n|  \\\" |  双引号 |\n|  \\a |  响铃 |\n|  \\b |  退格backspace |\n|  \\e |  转义 |\n|  \\000 | 空  |\n|  \\n |  换行 |\n|  \\v |  纵向制表符 |\n|  \\t |  横向制表符 |\n|  \\r |  回车 |\n|  \\f |  换页 |\n|  \\oyy | 八进制数，yy代表的字符，例如：\\o12代表换行  |\n|  \\xyy | \t十六进制数，yy代表的字符，例如：\\x0a代表换行  |\n|  \\other | 其它的字符以普通格式输出  |\n\n### Python字符串运算 ###\n\n&#160; &#160; &#160; &#160;下表实例变量a值为字符串 \"Hello\"，b变量值为 \"Python\"：\n\n```java\na = \"Hello\"\nb = \"Python\"\n\nprint(\"a + b 输出结果：\", a + b) # + 字符串连接操作 a + b 输出结果： HelloPython\nprint(\"a * 2 输出结果：\", a * 2) # 重复输出字符串 a*2 输出结果：HelloHello\nprint(\"a[1] 输出结果：\", a[1]) # 通过索引获取字符串中字符 a[1] 输出结果 e\nprint(\"a[1:4] 输出结果：\", a[1:4]) # 截取字符串中的一部分，遵循左闭右开原则，str[0,2] 是不包含第 3 个字符的。 a[1:4] 输出结果： ell\n\nif( \"H\" in a) : # in 成员运算符 - 如果字符串中包含给定的字符返回 True\n    print(\"H 在变量 a 中\")\nelse :\n    print(\"H 不在变量 a 中\")\n\nif( \"M\" not in a) : # not in 成员运算符 - 如果字符串中不包含给定的字符返回 True\n    print(\"M 不在变量 a 中\")\nelse :\n    print(\"M 在变量 a 中\")\n\nprint (r'\\n') # \t原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。\nprint (R'\\n')\n```\n\n### Python格式化字符串 ###\n\n&#160; &#160; &#160; &#160;Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。","tags":["Python"],"categories":["Python"]},{"title":"python对象——数字类型","url":"/2019/01/19/python对象——数字类型/","content":"> python程序的基础就是对象，因为对象是python编程中最基础的概念，是学习python所关注的焦点。  \n\n&#160; &#160; &#160; &#160;python数字类型的完整工具包括：\n1. 整数和浮点数\n2. 复数\n3. 固定精度的十进制数\n4. 有理数\n5. 集合\n6. 布尔类型\n7. 无穷整数精度\n8. 各种数字内置函数和模块  \n\n## 数字常量\n&#160; &#160; &#160; &#160;python在基本类型中，python提供了：整数（正整数和负整数）和浮点数（带有小数部分的数字）。python还提供了十六进制、八进制、二进制常量来表示整数。并且还允许无限精度的整数（只要内存空间允许，它可以增长成任意位数的整数）。如下简单示例：  \n\n![](http://47.105.201.20/991cd9c7-573b-4b7e-96b3-24a2ce77bc67.jpg)\n\n## 内置数学工具和扩展\n&#160; &#160; &#160; &#160;\n\n### 表达式操作符\n&#160; &#160; &#160; &#160;+ - * / >> **等\n\n### 内置数学函数\n&#160; &#160; &#160; &#160;pow abs round int hex bin等。\n\n### 公用模块\n&#160; &#160; &#160; &#160;random math等\n\n## python表达式操作符\n&#160; &#160; &#160; &#160;\n\n\n","tags":["Python"],"categories":["Python"]},{"title":"怎么用最短时间高效而踏实地学习 Python?","url":"/2019/01/19/怎么用最短时间高效而踏实地学习-Python/","content":"> 因为Python是一门不需要花太多精力（甚至可以说很少），就可以基本掌握的一门语言，所以推荐这本书。这是一本非常好的针对机器学习的入门书，书中的例子源码都是Python实现的，并且能帮你迅速熟悉Python相关的各种计算库。\n# 第一章 集体智慧导言\n## 1.1 什么是集体智慧\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;集体智慧（Collective Intelligence）:为了创造新的想法，而将一群人的行为、偏好或思想组合在一起。\n## 1.2 什么是机器学习\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;机器学习是人工智能（AI，artificial intelligence）领域中与算法相关的一个子域，它允许计算机不断地进行学习。大多数情况下，这相当于将一组数据传递给算法，并由算法推断出与这些数据的属性相关的信息————借助这些信息，算法就能准确预测出未来有可能会出现的其他数据。为了实现归纳，机器学习会利用它所认定的出现于数据中的重要特征对数据进行“训练”，并借此得到一个模型。\n# 第二章 提供推荐\n## 2.1 协作型过滤\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个协作型过滤算法通常的做法是对一大群人进行搜索，并从中找出与我们品味相近的一-小群人。算法会对这些人所偏爱的其他内容进行考查，并将它们组合起来构造出一个经过排名的推荐列表。有许多不同的方法可以帮助我们确定哪些人与自己的品味相近，并将他们的选择组合成列表。\n## 2.2 搜集偏好\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们可以先构造一个简单的数据集：\n```\n\t critics={'Lisa Rose': {'Lady in the Water': 2.5, 'Snakes on a Plane': 3.5,\n\t 'Just My Luck': 3.0, 'Superman Returns': 3.5, 'You, Me and Dupree': 2.5, \n\t 'The Night Listener': 3.0},\n\n\t 'Gene Seymour': {'Lady in the Water': 3.0, 'Snakes on a Plane': 3.5, \n\t 'Just My Luck': 1.5, 'Superman Returns': 5.0, 'The Night Listener': 3.0, \n\t 'You, Me and Dupree': 3.5}, \n\n\t'Michael Phillips': {'Lady in the Water': 2.5, 'Snakes on a Plane': 3.0,\n\t 'Superman Returns': 3.5, 'The Night Listener': 4.0},\n\n\t'Claudia Puig': {'Snakes on a Plane': 3.5, 'Just My Luck': 3.0,\n\t 'The Night Listener': 4.5, 'Superman Returns': 4.0, \n\t 'You, Me and Dupree': 2.5},\n\n\t'Mick LaSalle': {'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0, \n\t 'Just My Luck': 2.0, 'Superman Returns': 3.0, 'The Night Listener': 3.0,\n\t 'You, Me and Dupree': 2.0}, \n\n\t'Jack Matthews': {'Lady in the Water': 3.0, 'Snakes on a Plane': 4.0,\n\t 'The Night Listener': 3.0, 'Superman Returns': 5.0, 'You, Me and Dupree': 3.5},\n\n\t'Toby': {'Snakes on a Plane':4.5,'You, Me and Dupree':1.0,'Superman Returns':4.0},\n\n\t'xiaoYu': {'Lady in the Water': 2.0, 'Snakes on a Plane': 3.0,\n\t 'Just My Luck': 2.5, 'Superman Returns': 3.0, 'You, Me and Dupree': 2.0, \n\t 'The Night Listener': 2.5}}\n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果你对文字型数据不是那么敏感，我们将其转化为表格：总而言之：这里是几位观影者对几部电影的评分。\n\n<div align=center>\n\t<img src=\"http://47.105.201.20/48dce9e5-e15b-4ce6-9125-648dfd90a8e9.jpg\" width = \"700\" height = \"100\"  />\n</div>\n## 2.3 寻找相近的用户\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;搜集完人们的偏好数据之后，我们须要有一种方法来确定人们在品味方面的相似程度。为此，我们可以将每个人与所有其他人进行对比，并计算他们的相似度评价值。有若千种方法可以达到此目的，介绍两套计算相似度评价值的体系:**欧几里德距离**和**皮尔逊相关度**\n### 2.3.1 欧几里得距离\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多维空间中两点之间的距离，用来衡量二者的相似度。距离越小，相似度越高。\n### 2.3.2 皮尔逊相关度评价\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;判断两组数据与某一直线拟合程度的一种度量。在数据不是很规范的时候（如影评者对影片的评价总是相对于平均水平偏离很大时），会给出更好的结果。相关系数越大，相似度越高。","tags":["Python"],"categories":["Python"]},{"title":"文章名称","url":"/2019/01/19/文章名称/","tags":["centOS","tomcat"],"categories":["云服务器"]},{"title":"Hello World","url":"/2019/01/18/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]